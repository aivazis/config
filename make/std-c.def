# -*- Makefile -*-
#
# michael a.g. aivazis
# parasim
# (c) 1998-2018 all rights reserved
#

# Default settings for C compilation

# Developer preferences
    DEV_CC_FLAGS ?=
    DEV_CC_INCLUDES ?=
    DEV_CC_DEFINES ?=
    DEV_LCC_FLAGS ?=
    DEV_LCC_LIBPATH ?=


# Construction of compiler command line
    CC_FLAGS = $(PLATFORM_CC_FLAGS) $(COMPILER_CC_FLAGS) $(TARGET_CC_FLAGS) \
	     $(DEV_CC_FLAGS) $(PROJ_CC_FLAGS)
    CC_INCLUDES = $(PLATFORM_CC_INCLUDES) $(DIR_COMPILER)/$(F77_ID) \
		$(COMPILER_CC_INCLUDES) $(TARGET_CC_INCLUDES) \
		$(DEV_CC_INCLUDES) $(PROJ_CC_INCLUDES) $(EXTERNAL_INCLUDES) \
		$(BLD_INCDIR)
    CC_DEFINES = $(PLATFORM_CC_DEFINES) $(COMPILER_CC_DEFINES) \
	       $(TARGET_CC_DEFINES) $(DEV_CC_DEFINES) $(PROJ_CC_DEFINES) \
	       $(EXTERNAL_DEFINES)
    LCC_FLAGS = $(PLATFORM_LCC_FLAGS) $(COMPILER_LCC_FLAGS) \
	      $(TARGET_LCC_FLAGS) $(DEV_LCC_FLAGS) $(PROJ_LCC_FLAGS)
    LCC_LIBPATH = $(PLATFORM_LCC_LIBPATH) $(TARGET_LCC_LIBPATH) \
		$(DEV_LCC_LIBPATH) $(PROJ_LCC_LIBPATH) $(EXTERNAL_LIBPATH)

    CC_SOFLAGS = $(COMPILER_CC_SOFLAGS)
    LCC_SOFLAGS = $(COMPILER_LCC_SOFLAGS) $(EXTERNAL_SOFLAGS)

    CFLAGS = $(CC_BUILD_DEFINES) $(CC_BUILD_INCLUDES) $(CC_FLAGS)
    LCFLAGS = $(LCC_FLAGS) ${addprefix -L, $(LCC_LIBPATH)}
    LCC_FORTRAN = $(COMPILER_LCC_FORTRAN)


# Compile C source
$(PROJ_TMPDIR)/%.$(EXT_OBJ): %.$(EXT_C)
ifdef CC_MAKEDEPENDS_COMBINED
	@$(LOGEMIT_COMPILING_START)
	@$(RM) $(RMFLAGS) $@
	$(COMPILER_CC_DEPENDS) $(CFLAGS) -c -o $@ $<
	@if [ -f $@.$(EXT_DEPEND) ] ; then \
	  $(MV) $@.$(EXT_DEPEND) $*.$(EXT_DEPEND) ; \
	fi ; \
	if [ -f $*.$(EXT_DEPEND) ] ; then /bin/true ; else \
	  $(MV) $(PROJ_TMPDIR)/$*.$(EXT_DEPEND) $*.$(EXT_DEPEND) ; \
	fi ; \
	sed -e 's?^[^/].*:?$(PROJ_TMPDIR)/&?' < $*.$(EXT_DEPEND) > \
	  $(PROJ_TMPDIR)/$*.$(EXT_DEPEND) ; \
	tr -s '[:space:]' '\n' < $*.$(EXT_DEPEND) > $*.tmp.$(EXT_DEPEND) ; \
	sed -e 's/^ *//' -e 's/#.*//' -e 's/^[^:]*: *//' \
	  -e 's/ *\\$$//' -e '/^$$/ d' -e 's/$$/ :/' < $*.tmp.$(EXT_DEPEND) \
	  >> $(PROJ_TMPDIR)/$*.$(EXT_DEPEND) ; \
	$(RM) $(RMFLAGS) $*.$(EXT_DEPEND) $*.tmp.$(EXT_DEPEND)
else
	@$(LOGEMIT_DEPENDS_START)
	@$(CC_MAKEDEPEND); \
	sed -e 's?^[^/].*:?$(PROJ_TMPDIR)/&?' < $*.$(EXT_DEPEND) > \
	  $(PROJ_TMPDIR)/$*.$(EXT_DEPEND) ; \
	tr -s '[:space:]' '\n' < $*.$(EXT_DEPEND) > $*.tmp.$(EXT_DEPEND) ; \
	sed -e 's/^ *//' -e 's/#.*//' -e 's/^[^:]*: *//' \
	  -e 's/ *\\$$//' -e '/^$$/ d' -e 's/$$/ :/' < $*.tmp.$(EXT_DEPEND) \
	  >> $(PROJ_TMPDIR)/$*.$(EXT_DEPEND) ; \
	$(RM) $(RMFLAGS) $*.$(EXT_DEPEND) $*.tmp.$(EXT_DEPEND)
	@$(LOGEMIT_DEPENDS_END)
	@$(LOGEMIT_COMPILING_START)
	$(CC_COMPILE_COMMAND)
endif
	@-$(TAGS) $(TAGS_FLAGS) -o $(TAGS_FILE) $*.$(EXT_C) $*.$(EXT_CH)
	@$(LOGEMIT_COMPILING_END)

# Modified C++ compile command when using TAU
ifeq (tau, ${findstring tau, $(BLD_USER_TARGET)})
ifdef NO_TAU_INSTRUMENTATION
CC_COMPILE_COMMAND =	$(CC) $(CFLAGS) -c -o $@ $<
else
CC_COMPILE_COMMAND =	$(PDTCCPARSE) $< $(CC_BUILD_DEFINES) -DWITH_TAU \
			$(CC_BUILD_INCLUDES); \
			$(TAUINSTR) $*.pdb $< -o $*.inst.$(EXT_C) \
			-g $(PROJ_TAU_GROUP) -f $(PROJ_TAU_SELECT); \
			$(CC) $(CFLAGS) -c -o $@ $*.inst.$(EXT_C); \
			$(RM) $(RMFLAGS) $*.pdb $*.inst.$(EXT_C)
endif
else
CC_COMPILE_COMMAND =	$(CC) $(CFLAGS) -c -o $@ $<
endif

# Generate dependencies for C source
ifdef CC_MAKEDEPENDS_FILE
CC_MAKEDEPEND = $(COMPILER_CC_DEPENDS) $(CC_BUILD_DEFINES) \
		$(CC_BUILD_INCLUDES) $<
else
CC_MAKEDEPEND = $(COMPILER_CC_DEPENDS) $(CC_BUILD_DEFINES) \
		$(CC_BUILD_INCLUDES) $< > $*.$(EXT_DEPEND)
endif

# Generate precompiled headers if supported
ifdef USE_CCPRECOMP_HEADERS
$(CCPPRECOMP_HEADERS)
endif

# end of file
