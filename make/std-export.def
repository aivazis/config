# -*- Makefile -*-
#
#--------------------------------------------------------------------------
#
#                       VTF Development Team
#                California Institute of Technology
#                   (C) 2003 All Rights Reserved
#
#--------------------------------------------------------------------------

#
# Support for exporting header files and products
#

$(EXPORT_ROOT):
	@$(MKDIR) $(MKPARENTS) $(EXPORT_ROOT)

$(EXPORT_INCDIR):
	@$(MKDIR) $(MKPARENTS) $(EXPORT_INCDIR)

$(EXPORT_LIBDIR):
	@$(MKDIR) $(MKPARENTS) $(EXPORT_LIBDIR)

$(EXPORT_BINDIR):
	@$(MKDIR) $(MKPARENTS) $(EXPORT_BINDIR)

$(EXPORT_MODULEDIR):
	@$(MKDIR) $(MKPARENTS) $(EXPORT_MODULEDIR)

$(EXPORT_ETCDIR):
	@$(MKDIR) $(MKPARENTS) $(EXPORT_ETCDIR)

#---------------------------------------------------------------------------
#
# Export targets make stuff available for other local packages
# or for dynamic loading, while release targets make things
# visible to third-party software packages
#

export:: $(EXPORT_ROOT)

release:: $(EXPORT_ROOT)

# Add proper directory prefix to export header filenames

    EXPORTED_HEADERS = ${addprefix ${EXPORT_INCDIR}/, ${EXPORT_HEADERS}}
    EXPORTED_PKG_HEADERS = ${addprefix ${EXPORT_INCDIR}/${PACKAGE}/, ${EXPORT_PKG_HEADERS}}

# Create dependencies between exported header files and originals

$(EXPORT_INCDIR)/%.$(EXT_CH): %.$(EXT_CH)
	@-$(CP_F) $< $(EXPORT_INCDIR)

$(EXPORT_INCDIR)/$(PACKAGE)/%.$(EXT_CH): %.$(EXT_CH)
	@-$(CP_F) $< $(EXPORT_INCDIR)/$(PACKAGE)

# in case the C and C++ headers don't have the same extensions
ifneq ($(EXT_CH), $(EXT_CHH))
$(EXPORT_INCDIR)/%.$(EXT_CHH): %.$(EXT_CHH)
	@-$(CP_F) $< $(EXPORT_INCDIR)

$(EXPORT_INCDIR)/$(PACKAGE)/%.$(EXT_CHH): %.$(EXT_CHH)
	@-$(CP_F) $< $(EXPORT_INCDIR)/$(PACKAGE)
endif

$(EXPORT_INCDIR)/%.$(EXT_CXX): %.$(EXT_CXX)
	@-$(CP_F) $< $(EXPORT_INCDIR)

$(EXPORT_INCDIR)/$(PACKAGE)/%.$(EXT_CXX): %.$(EXT_CXX)
	@-$(CP_F) $< $(EXPORT_INCDIR)/$(PACKAGE)

$(EXPORT_INCDIR)/%.$(EXT_ICC): %.$(EXT_ICC)
	@-$(CP_F) $< $(EXPORT_INCDIR)

$(EXPORT_INCDIR)/$(PACKAGE)/%.$(EXT_ICC): %.$(EXT_ICC)
	@-$(CP_F) $< $(EXPORT_INCDIR)/$(PACKAGE)

# Place headers in project-specific build include dir
export-headers:: $(EXPORT_INCDIR) $(EXPORTED_HEADERS)
	@-$(CHMOD_R_WRITE) $(EXPORT_INCDIR)

# Place headers in package-specific subdir of project include dir
export-package-headers:: export-package-dir $(EXPORTED_PKG_HEADERS)
	@-$(CHMOD_R_WRITE) $(EXPORT_INCDIR)/$(PACKAGE)

export-package-dir::
	@-$(MKDIR) $(MKPARENTS) $(EXPORT_INCDIR)/$(PACKAGE)

# Place project headers in project-specific build include dir
# (needed when some headers are at project level, others at package level)
export-project-headers::
	EXPORT_PROJ_HEADERS=$(EXPORT_PROJ_HEADERS) $(MM) export-project-headers

# Place headers in project-specific export include dir
release-headers:: $(EXPORT_INCDIR) $(EXPORTED_HEADERS)
	@-$(CP_F) $(EXPORTED_HEADERS) $(EXPORT_INCDIR)

# Place headers in package-specific subdir of export include dir
release-package-headers:: release-package-dir $(EXPORTED_PKG_HEADERS)
	-$(CP_F) $(EXPORTED_PKG_HEADERS) $(EXPORT_INCDIR)/$(PACKAGE)

release-package-dir:
	-$(MKDIR) $(MKPARENTS) $(EXPORT_INCDIR)/$(PACKAGE)

# Copy libraries to export lib dir
export-libraries:: $(EXPORT_LIBDIR)
	@for x in $(EXPORT_LIBS); do { \
            if [ -f $$x ]; then { \
                $(CP_F) $$x $(EXPORT_LIBDIR); \
            } fi; \
        } done

# Copy libraries from build-specific lib dir to export libdir
release-libraries:: $(EXPORT_LIBDIR)
	@for x in $(EXPORT_LIBS); do { \
            if [ -f $$x ]; then { \
                $(CP_F) $$x $(EXPORT_LIBDIR); \
            } fi; \
        } done

# Copy binaries to export bin dir
export-binaries:: $(EXPORT_BINDIR)
	@for x in $(EXPORT_BINS); do { \
            if [ -f $$x ]; then { \
                $(CP_F) $$x $(EXPORT_BINDIR); \
            } fi; \
        } done

# Copy binaries from build-specific bin dir to export bindir
release-binaries:: $(PROJ_BINDIR) $(EXPORT_BINDIR)
	@for x in $(EXPORT_BINS); do { \
            if [ -f $$x ]; then { \
                $(CP_F) $$x $(EXPORT_BINDIR); \
            } fi; \
        } done

# target to force the creation of the etc directory for $PROJECTs that need it
export-etcdir: $(EXPORT_ETCDIR)

release-etcdir: $(EXPORT_ETCDIR)

# Compile python scripts and move all modules to project-specific export dir
export-python-modules:: $(EXPORT_MODULEDIR)
	@$(PYTHON) $(PYTHON_FLAGS) -m compileall -l `pwd` $(PYTHON_PYCFLAGS)
	@-$(TAGS) $(TAGS_FLAGS) -o $(TAGS_FILE) *.py
	@for x in $(EXPORT_PYTHON_MODULES); do { \
            if [ -f $$x ]; then { \
                $(MV_F) $$x[cod] $(EXPORT_MODULEDIR); \
                $(CHMOD_WRITE) $(EXPORT_MODULEDIR)/$$x[cod]; \
            } fi; \
        } done

release-python-modules:: $(EXPORT_MODULEDIR)
	@$(PYTHON) $(PYTHON_FLAGS) -m compileall -l `pwd` $(PYTHON_PYCFLAGS)
	@-$(TAGS) $(TAGS_FLAGS) -o $(TAGS_FILE) *.py
	@for x in $(EXPORT_PYTHON_MODULES); do { \
            if [ -f $$x ]; then { \
                $(MV_F) $$x[cod] $(EXPORT_MODULEDIR); \
                $(CHMOD_WRITE) $(EXPORT_MODULEDIR)/$$x[cod]; \
            } fi; \
        } done

# Compile python scripts and move all modules to package subdirectory
# of project-specific export dir
export-package-python-modules:: export-package-moduledir
	@$(PYTHON) $(PYTHON_FLAGS) -m compileall -l `pwd` $(PYTHON_PYCFLAGS)
	@-$(TAGS) $(TAGS_FLAGS) -o $(TAGS_FILE) *.py
	@for x in $(EXPORT_PYTHON_MODULES); do { \
            if [ -f $$x ]; then { \
                $(MV_F) $$x[cod] $(EXPORT_MODULEDIR)/$(PACKAGE); \
                $(CHMOD_WRITE) $(EXPORT_MODULEDIR)/$(PACKAGE)/$$x[cod]; \
            } fi; \
        } done

release-package-python-modules:: release-package-moduledir
	@$(PYTHON) $(PYTHON_FLAGS) -m compileall -l `pwd` $(PYTHON_PYCFLAGS)
	@-$(TAGS) $(TAGS_FLAGS) -o $(TAGS_FILE) *.py
	@for x in $(EXPORT_PYTHON_MODULES); do { \
            if [ -f $$x ]; then { \
                $(MV_F) $$x[cod] $(EXPORT_MODULEDIR)/$(PACKAGE); \
                $(CHMOD_WRITE) $(EXPORT_MODULEDIR)/$(PACKAGE)/$$x[cod]; \
            } fi; \
        } done

export-etc:: export-etcdir
	@-$(CP_F) $(EXPORT_ETC) $(EXPORT_ETCDIR)

export-package-etc:: export-package-etcdir
	@-$(CP_F) $(EXPORT_ETC) $(EXPORT_ETCDIR)/$(PACKAGE)

export-package-moduledir::
	@-$(MKDIR) $(MKPARENTS) $(EXPORT_MODULEDIR)/$(PACKAGE)

export-package-etcdir::
	@-$(MKDIR) $(MKPARENTS) $(EXPORT_ETCDIR)/$(PACKAGE)

release-etc:: release-package-etcdir
	@-$(CP_F) $(EXPORT_ETC) $(EXPORT_ETCDIR)

release-package-moduledir::
	@-$(MKDIR) $(MKPARENTS) $(EXPORT_MODULEDIR)/$(PACKAGE)

release-package-etcdir::
	@-$(MKDIR) $(MKPARENTS) $(EXPORT_ETCDIR)/$(PACKAGE)


# version
# $Id: std-export.def,v 1.27 2013/05/25 23:42:21 mga Exp $

#
# End of file
