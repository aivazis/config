#--------------------------------------------------------------------------
#
#                       Michael A.G. Aivazis
#                California Institute of Technology
#                   (C) 1999 All Rights Reserved
#
#--------------------------------------------------------------------------

# $Log: c.def,v $
# Revision 1.9  2001/07/18 03:42:18  cummings
# Changed PGI compiler optimization flag from -O2 to -fast.  This is like
# -O2 but also adds -Mnoframe, -Munroll and some Pentium-specific stuff.
# Also added flag --no_using_std to C++ compiles, which turns off the
# implicit "using namespace std;" statement that pgCC normally includes
# by default.
#
# Revision 1.8  2001/05/04 00:38:11  cummings
# Added check for "insure" in user's build target before utilizing
# combined dependency info generation and code compilation.
#
# Revision 1.7  2001/03/21 22:09:34  cummings
# Updated PGI compiler definitions to use combined compilation and
# make dependency file generation.
#
# Revision 1.6  2000/10/11 19:14:50  cummings
# Added flag for code instrumentation and profiling with pgprof.
#
# Revision 1.5  2000/10/03 01:40:13  cummings
# Removed mixed language support, which is handled in f77.def.
#
# Revision 1.4  2000/09/21 21:26:17  cummings
# Changed compile-time SOFLAG to -fpic and added link-time SOFLAG
# with value of -shared.
#
# Revision 1.3  2000/05/17 23:37:26  aivazis
# Major update in the way defines and include paths are handled
#
# Revision 1.2  1999/09/16 20:22:47  aivazis
# Added libg2c for the C/FORTRAN linking
#
# Revision 1.1  1999/09/15 04:27:01  aivazis
# Original source
#

#
# Definitions for Portland Group C compiler
#
    CC_ID = PGI-3.0
#
# The name of the binary
#
    COMPILER_CC_NAME = pgcc
#
# Command line options
#
    COMPILER_CC_FLAGS = 
    COMPILER_CC_INCLUDES = $(DIR_COMPILER)/$(CC_ID)
    COMPILER_CC_DEFINES = CC_ID="$(CC_ID)"

    COMPILER_CC_SOFLAGS = -fpic
#
    CC_OPT_FLAGS = -fast          # Optimization flags
    CC_DEBUG_FLAGS = -g           # Debug flags
    CC_PROF_FLAGS = -Mprof=func   # Profiling flags
#
# When using the C compiler to preprocess
#
    COMPILER_CC_PREPROCESS = $(COMPILER_CC_NAME) -E
#
# When using the C compiler to make dependencies
#
    COMPILER_CC_DEPENDS = $(COMPILER_CC_NAME) -M
ifeq (,${findstring insure, $(BLD_USER_TARGET)})
    COMPILER_CC_DEPENDS = $(COMPILER_CC_NAME) -MD
    CC_MAKEDEPENDS_COMBINED = true
endif
#
# When using the C compiler to link
#
    COMPILER_LCC_NAME = $(COMPILER_CC_NAME)
    COMPILER_LCC_FLAGS =
    COMPILER_LCC_LIBPATH =
    COMPILER_LCC_SOFLAGS = -shared
#
# Clean up
#
    COMPILER_CC_CLEAN = so_locations
    COMPILER_CC_DISTCLEAN =
#
# End of file
